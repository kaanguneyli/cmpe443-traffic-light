
led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000494  080001f0  080001f0  000011f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08000684  08000684  00001684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080006a8  080006a8  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  080006a8  080006a8  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080006a8  080006a8  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080006a8  080006a8  000016a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080006ac  080006ac  000016ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  080006b0  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  080006b4  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  080006b4  00002020  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000660  00000000  00000000  0000203a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000211  00000000  00000000  0000269a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000b0  00000000  00000000  000028b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000076  00000000  00000000  00002960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000002f8  00000000  00000000  000029d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000d03  00000000  00000000  00002cce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000074c1  00000000  00000000  000039d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0000ae92  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001c0  00000000  00000000  0000aed8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  0000b098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	@ (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	@ (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	@ (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000004 	.word	0x20000004
 800020c:	00000000 	.word	0x00000000
 8000210:	0800066c 	.word	0x0800066c

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	@ (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	@ (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	@ (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000008 	.word	0x20000008
 800022c:	0800066c 	.word	0x0800066c

08000230 <LPUART1_initialization>:
#include <string.h>
#include "UART.h"
#include "defines.h"
#include "GPIO.h"

void LPUART1_initialization(void) {
 8000230:	b480      	push	{r7}
 8000232:	af00      	add	r7, sp, #0
	RCC_APB1ENR1 |= 1 << 28;
 8000234:	4b3a      	ldr	r3, [pc, #232]	@ (8000320 <LPUART1_initialization+0xf0>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	4a39      	ldr	r2, [pc, #228]	@ (8000320 <LPUART1_initialization+0xf0>)
 800023a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800023e:	6013      	str	r3, [r2, #0]
	PWR_CR1 |= 1 << 14;
 8000240:	4b38      	ldr	r3, [pc, #224]	@ (8000324 <LPUART1_initialization+0xf4>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	4a37      	ldr	r2, [pc, #220]	@ (8000324 <LPUART1_initialization+0xf4>)
 8000246:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800024a:	6013      	str	r3, [r2, #0]
	PWR_CR2 |= 1 << 9;
 800024c:	4b36      	ldr	r3, [pc, #216]	@ (8000328 <LPUART1_initialization+0xf8>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	4a35      	ldr	r2, [pc, #212]	@ (8000328 <LPUART1_initialization+0xf8>)
 8000252:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000256:	6013      	str	r3, [r2, #0]
	RCC_CCIPR1 &= ~(1 << 11);
 8000258:	4b34      	ldr	r3, [pc, #208]	@ (800032c <LPUART1_initialization+0xfc>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	4a33      	ldr	r2, [pc, #204]	@ (800032c <LPUART1_initialization+0xfc>)
 800025e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000262:	6013      	str	r3, [r2, #0]
	RCC_CCIPR1 |= 1 << 10;
 8000264:	4b31      	ldr	r3, [pc, #196]	@ (800032c <LPUART1_initialization+0xfc>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	4a30      	ldr	r2, [pc, #192]	@ (800032c <LPUART1_initialization+0xfc>)
 800026a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800026e:	6013      	str	r3, [r2, #0]
	RCC_AHB2ENR |= 1 << 6;
 8000270:	4b2f      	ldr	r3, [pc, #188]	@ (8000330 <LPUART1_initialization+0x100>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	4a2e      	ldr	r2, [pc, #184]	@ (8000330 <LPUART1_initialization+0x100>)
 8000276:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800027a:	6013      	str	r3, [r2, #0]
	GPIOG->MODER &= ~(0b0101 << (7 * 2));
 800027c:	4b2d      	ldr	r3, [pc, #180]	@ (8000334 <LPUART1_initialization+0x104>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	4a2c      	ldr	r2, [pc, #176]	@ (8000334 <LPUART1_initialization+0x104>)
 8000282:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8000286:	6013      	str	r3, [r2, #0]
	GPIOG->MODER |= 0b1010 << (7 * 2);
 8000288:	4b2a      	ldr	r3, [pc, #168]	@ (8000334 <LPUART1_initialization+0x104>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	4a29      	ldr	r2, [pc, #164]	@ (8000334 <LPUART1_initialization+0x104>)
 800028e:	f443 3320 	orr.w	r3, r3, #163840	@ 0x28000
 8000292:	6013      	str	r3, [r2, #0]
	GPIOG->AFRL &= ~(0b0111 << (7 * 4));
 8000294:	4b27      	ldr	r3, [pc, #156]	@ (8000334 <LPUART1_initialization+0x104>)
 8000296:	6a1b      	ldr	r3, [r3, #32]
 8000298:	4a26      	ldr	r2, [pc, #152]	@ (8000334 <LPUART1_initialization+0x104>)
 800029a:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 800029e:	6213      	str	r3, [r2, #32]
	GPIOG->AFRL |= 0b1000 << (7 * 4);
 80002a0:	4b24      	ldr	r3, [pc, #144]	@ (8000334 <LPUART1_initialization+0x104>)
 80002a2:	6a1b      	ldr	r3, [r3, #32]
 80002a4:	4a23      	ldr	r2, [pc, #140]	@ (8000334 <LPUART1_initialization+0x104>)
 80002a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80002aa:	6213      	str	r3, [r2, #32]
	GPIOG->AFRH &= ~0b0111;
 80002ac:	4b21      	ldr	r3, [pc, #132]	@ (8000334 <LPUART1_initialization+0x104>)
 80002ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80002b0:	4a20      	ldr	r2, [pc, #128]	@ (8000334 <LPUART1_initialization+0x104>)
 80002b2:	f023 0307 	bic.w	r3, r3, #7
 80002b6:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOG->AFRH |= 0b1000;
 80002b8:	4b1e      	ldr	r3, [pc, #120]	@ (8000334 <LPUART1_initialization+0x104>)
 80002ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80002bc:	4a1d      	ldr	r2, [pc, #116]	@ (8000334 <LPUART1_initialization+0x104>)
 80002be:	f043 0308 	orr.w	r3, r3, #8
 80002c2:	6253      	str	r3, [r2, #36]	@ 0x24
	RCC_APB1ENR2 |= 1;
 80002c4:	4b1c      	ldr	r3, [pc, #112]	@ (8000338 <LPUART1_initialization+0x108>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4a1b      	ldr	r2, [pc, #108]	@ (8000338 <LPUART1_initialization+0x108>)
 80002ca:	f043 0301 	orr.w	r3, r3, #1
 80002ce:	6013      	str	r3, [r2, #0]
	LPUART1->BRR = 8888;
 80002d0:	4b1a      	ldr	r3, [pc, #104]	@ (800033c <LPUART1_initialization+0x10c>)
 80002d2:	f242 22b8 	movw	r2, #8888	@ 0x22b8
 80002d6:	60da      	str	r2, [r3, #12]
	LPUART1->CR1 |= 1 << 29;
 80002d8:	4b18      	ldr	r3, [pc, #96]	@ (800033c <LPUART1_initialization+0x10c>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	4a17      	ldr	r2, [pc, #92]	@ (800033c <LPUART1_initialization+0x10c>)
 80002de:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80002e2:	6013      	str	r3, [r2, #0]
	LPUART1->CR1 |= 0b11 << 2;
 80002e4:	4b15      	ldr	r3, [pc, #84]	@ (800033c <LPUART1_initialization+0x10c>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4a14      	ldr	r2, [pc, #80]	@ (800033c <LPUART1_initialization+0x10c>)
 80002ea:	f043 030c 	orr.w	r3, r3, #12
 80002ee:	6013      	str	r3, [r2, #0]
	LPUART1->CR1 |= 1 << 5;
 80002f0:	4b12      	ldr	r3, [pc, #72]	@ (800033c <LPUART1_initialization+0x10c>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4a11      	ldr	r2, [pc, #68]	@ (800033c <LPUART1_initialization+0x10c>)
 80002f6:	f043 0320 	orr.w	r3, r3, #32
 80002fa:	6013      	str	r3, [r2, #0]
	ISER2 |= 1 << 2;
 80002fc:	4b10      	ldr	r3, [pc, #64]	@ (8000340 <LPUART1_initialization+0x110>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	4a0f      	ldr	r2, [pc, #60]	@ (8000340 <LPUART1_initialization+0x110>)
 8000302:	f043 0304 	orr.w	r3, r3, #4
 8000306:	6013      	str	r3, [r2, #0]
	LPUART1->CR1 |= 1;
 8000308:	4b0c      	ldr	r3, [pc, #48]	@ (800033c <LPUART1_initialization+0x10c>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	4a0b      	ldr	r2, [pc, #44]	@ (800033c <LPUART1_initialization+0x10c>)
 800030e:	f043 0301 	orr.w	r3, r3, #1
 8000312:	6013      	str	r3, [r2, #0]
}
 8000314:	bf00      	nop
 8000316:	46bd      	mov	sp, r7
 8000318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop
 8000320:	40021058 	.word	0x40021058
 8000324:	40007000 	.word	0x40007000
 8000328:	40007004 	.word	0x40007004
 800032c:	40021088 	.word	0x40021088
 8000330:	4002104c 	.word	0x4002104c
 8000334:	42021800 	.word	0x42021800
 8000338:	4002105c 	.word	0x4002105c
 800033c:	40008000 	.word	0x40008000
 8000340:	e000e108 	.word	0xe000e108

08000344 <enable_TIM6>:


#define TIM6 ((TIMxBasicType *) 0x40001000)

// Used for delay() function
void enable_TIM6(void) {
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
	RCC_APB1ENR1 |= 1 << 4;
 8000348:	4b0f      	ldr	r3, [pc, #60]	@ (8000388 <enable_TIM6+0x44>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	4a0e      	ldr	r2, [pc, #56]	@ (8000388 <enable_TIM6+0x44>)
 800034e:	f043 0310 	orr.w	r3, r3, #16
 8000352:	6013      	str	r3, [r2, #0]
	TIM6->PSC = 3999;
 8000354:	4b0d      	ldr	r3, [pc, #52]	@ (800038c <enable_TIM6+0x48>)
 8000356:	f640 729f 	movw	r2, #3999	@ 0xf9f
 800035a:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM6->ARR = 999;
 800035c:	4b0b      	ldr	r3, [pc, #44]	@ (800038c <enable_TIM6+0x48>)
 800035e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000362:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM6->CR1 &= ~(1 << 1);
 8000364:	4b09      	ldr	r3, [pc, #36]	@ (800038c <enable_TIM6+0x48>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	4a08      	ldr	r2, [pc, #32]	@ (800038c <enable_TIM6+0x48>)
 800036a:	f023 0302 	bic.w	r3, r3, #2
 800036e:	6013      	str	r3, [r2, #0]
	TIM6->CR1 |= 1;
 8000370:	4b06      	ldr	r3, [pc, #24]	@ (800038c <enable_TIM6+0x48>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	4a05      	ldr	r2, [pc, #20]	@ (800038c <enable_TIM6+0x48>)
 8000376:	f043 0301 	orr.w	r3, r3, #1
 800037a:	6013      	str	r3, [r2, #0]
}
 800037c:	bf00      	nop
 800037e:	46bd      	mov	sp, r7
 8000380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000384:	4770      	bx	lr
 8000386:	bf00      	nop
 8000388:	40021058 	.word	0x40021058
 800038c:	40001000 	.word	0x40001000

08000390 <GPIO_initialization>:
// Used for RGB LEDs
void GPIO_initialization(void) {
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0
	RCC_AHB2ENR |= 0b1000;
 8000394:	4b17      	ldr	r3, [pc, #92]	@ (80003f4 <GPIO_initialization+0x64>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	4a16      	ldr	r2, [pc, #88]	@ (80003f4 <GPIO_initialization+0x64>)
 800039a:	f043 0308 	orr.w	r3, r3, #8
 800039e:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &= ~(0b10 << (3 * 2));
 80003a0:	4b15      	ldr	r3, [pc, #84]	@ (80003f8 <GPIO_initialization+0x68>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	4a14      	ldr	r2, [pc, #80]	@ (80003f8 <GPIO_initialization+0x68>)
 80003a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80003aa:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= 0b01 << (3 * 2);
 80003ac:	4b12      	ldr	r3, [pc, #72]	@ (80003f8 <GPIO_initialization+0x68>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	4a11      	ldr	r2, [pc, #68]	@ (80003f8 <GPIO_initialization+0x68>)
 80003b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80003b6:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &= ~(0b10 << (4 * 2));
 80003b8:	4b0f      	ldr	r3, [pc, #60]	@ (80003f8 <GPIO_initialization+0x68>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4a0e      	ldr	r2, [pc, #56]	@ (80003f8 <GPIO_initialization+0x68>)
 80003be:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80003c2:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= 0b01 << (4 * 2);
 80003c4:	4b0c      	ldr	r3, [pc, #48]	@ (80003f8 <GPIO_initialization+0x68>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	4a0b      	ldr	r2, [pc, #44]	@ (80003f8 <GPIO_initialization+0x68>)
 80003ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80003ce:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &= ~(0b10 << (5 * 2));
 80003d0:	4b09      	ldr	r3, [pc, #36]	@ (80003f8 <GPIO_initialization+0x68>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	4a08      	ldr	r2, [pc, #32]	@ (80003f8 <GPIO_initialization+0x68>)
 80003d6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80003da:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= 0b01 << (5 * 2);
 80003dc:	4b06      	ldr	r3, [pc, #24]	@ (80003f8 <GPIO_initialization+0x68>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	4a05      	ldr	r2, [pc, #20]	@ (80003f8 <GPIO_initialization+0x68>)
 80003e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80003e6:	6013      	str	r3, [r2, #0]
}
 80003e8:	bf00      	nop
 80003ea:	46bd      	mov	sp, r7
 80003ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f0:	4770      	bx	lr
 80003f2:	bf00      	nop
 80003f4:	4002104c 	.word	0x4002104c
 80003f8:	42020c00 	.word	0x42020c00

080003fc <turn_on_LED_RED>:
void turn_on_LED_RED(void) {
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0
	GPIOD->ODR |= 1 << 3;
 8000400:	4b0b      	ldr	r3, [pc, #44]	@ (8000430 <turn_on_LED_RED+0x34>)
 8000402:	695b      	ldr	r3, [r3, #20]
 8000404:	4a0a      	ldr	r2, [pc, #40]	@ (8000430 <turn_on_LED_RED+0x34>)
 8000406:	f043 0308 	orr.w	r3, r3, #8
 800040a:	6153      	str	r3, [r2, #20]
	GPIOD->ODR &= ~(1 << 4);
 800040c:	4b08      	ldr	r3, [pc, #32]	@ (8000430 <turn_on_LED_RED+0x34>)
 800040e:	695b      	ldr	r3, [r3, #20]
 8000410:	4a07      	ldr	r2, [pc, #28]	@ (8000430 <turn_on_LED_RED+0x34>)
 8000412:	f023 0310 	bic.w	r3, r3, #16
 8000416:	6153      	str	r3, [r2, #20]
	GPIOD->ODR &= ~(1 << 5);
 8000418:	4b05      	ldr	r3, [pc, #20]	@ (8000430 <turn_on_LED_RED+0x34>)
 800041a:	695b      	ldr	r3, [r3, #20]
 800041c:	4a04      	ldr	r2, [pc, #16]	@ (8000430 <turn_on_LED_RED+0x34>)
 800041e:	f023 0320 	bic.w	r3, r3, #32
 8000422:	6153      	str	r3, [r2, #20]
}
 8000424:	bf00      	nop
 8000426:	46bd      	mov	sp, r7
 8000428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042c:	4770      	bx	lr
 800042e:	bf00      	nop
 8000430:	42020c00 	.word	0x42020c00

08000434 <turn_on_LED_YELLOW>:
void turn_on_LED_YELLOW(void) {
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
	GPIOD->ODR &= ~(1 << 3);
 8000438:	4b0b      	ldr	r3, [pc, #44]	@ (8000468 <turn_on_LED_YELLOW+0x34>)
 800043a:	695b      	ldr	r3, [r3, #20]
 800043c:	4a0a      	ldr	r2, [pc, #40]	@ (8000468 <turn_on_LED_YELLOW+0x34>)
 800043e:	f023 0308 	bic.w	r3, r3, #8
 8000442:	6153      	str	r3, [r2, #20]
	GPIOD->ODR |= 1 << 4;
 8000444:	4b08      	ldr	r3, [pc, #32]	@ (8000468 <turn_on_LED_YELLOW+0x34>)
 8000446:	695b      	ldr	r3, [r3, #20]
 8000448:	4a07      	ldr	r2, [pc, #28]	@ (8000468 <turn_on_LED_YELLOW+0x34>)
 800044a:	f043 0310 	orr.w	r3, r3, #16
 800044e:	6153      	str	r3, [r2, #20]
	GPIOD->ODR &= ~(1 << 5);
 8000450:	4b05      	ldr	r3, [pc, #20]	@ (8000468 <turn_on_LED_YELLOW+0x34>)
 8000452:	695b      	ldr	r3, [r3, #20]
 8000454:	4a04      	ldr	r2, [pc, #16]	@ (8000468 <turn_on_LED_YELLOW+0x34>)
 8000456:	f023 0320 	bic.w	r3, r3, #32
 800045a:	6153      	str	r3, [r2, #20]
}
 800045c:	bf00      	nop
 800045e:	46bd      	mov	sp, r7
 8000460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop
 8000468:	42020c00 	.word	0x42020c00

0800046c <turn_on_LED_GREEN>:
void turn_on_LED_GREEN(void) {
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
	GPIOD->ODR &= ~(1 << 3);
 8000470:	4b0b      	ldr	r3, [pc, #44]	@ (80004a0 <turn_on_LED_GREEN+0x34>)
 8000472:	695b      	ldr	r3, [r3, #20]
 8000474:	4a0a      	ldr	r2, [pc, #40]	@ (80004a0 <turn_on_LED_GREEN+0x34>)
 8000476:	f023 0308 	bic.w	r3, r3, #8
 800047a:	6153      	str	r3, [r2, #20]
	GPIOD->ODR &= ~(1 << 4);
 800047c:	4b08      	ldr	r3, [pc, #32]	@ (80004a0 <turn_on_LED_GREEN+0x34>)
 800047e:	695b      	ldr	r3, [r3, #20]
 8000480:	4a07      	ldr	r2, [pc, #28]	@ (80004a0 <turn_on_LED_GREEN+0x34>)
 8000482:	f023 0310 	bic.w	r3, r3, #16
 8000486:	6153      	str	r3, [r2, #20]
	GPIOD->ODR |= 1 << 5;
 8000488:	4b05      	ldr	r3, [pc, #20]	@ (80004a0 <turn_on_LED_GREEN+0x34>)
 800048a:	695b      	ldr	r3, [r3, #20]
 800048c:	4a04      	ldr	r2, [pc, #16]	@ (80004a0 <turn_on_LED_GREEN+0x34>)
 800048e:	f043 0320 	orr.w	r3, r3, #32
 8000492:	6153      	str	r3, [r2, #20]
}
 8000494:	bf00      	nop
 8000496:	46bd      	mov	sp, r7
 8000498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049c:	4770      	bx	lr
 800049e:	bf00      	nop
 80004a0:	42020c00 	.word	0x42020c00

080004a4 <delay>:

// Blocking delay, it will delay for given seconds
void delay(int second) {
 80004a4:	b480      	push	{r7}
 80004a6:	b085      	sub	sp, #20
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < second; i++) {
 80004ac:	2300      	movs	r3, #0
 80004ae:	60fb      	str	r3, [r7, #12]
 80004b0:	e00f      	b.n	80004d2 <delay+0x2e>
		TIM6->CNT = 0;
 80004b2:	4b0d      	ldr	r3, [pc, #52]	@ (80004e8 <delay+0x44>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	625a      	str	r2, [r3, #36]	@ 0x24
		while ((TIM6->SR & 1) == 0)
 80004b8:	bf00      	nop
 80004ba:	4b0b      	ldr	r3, [pc, #44]	@ (80004e8 <delay+0x44>)
 80004bc:	691b      	ldr	r3, [r3, #16]
 80004be:	f003 0301 	and.w	r3, r3, #1
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d0f9      	beq.n	80004ba <delay+0x16>
			;
		TIM6->SR = 0;
 80004c6:	4b08      	ldr	r3, [pc, #32]	@ (80004e8 <delay+0x44>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	611a      	str	r2, [r3, #16]
	for (int i = 0; i < second; i++) {
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	3301      	adds	r3, #1
 80004d0:	60fb      	str	r3, [r7, #12]
 80004d2:	68fa      	ldr	r2, [r7, #12]
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	429a      	cmp	r2, r3
 80004d8:	dbeb      	blt.n	80004b2 <delay+0xe>
	}
}
 80004da:	bf00      	nop
 80004dc:	bf00      	nop
 80004de:	3714      	adds	r7, #20
 80004e0:	46bd      	mov	sp, r7
 80004e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e6:	4770      	bx	lr
 80004e8:	40001000 	.word	0x40001000

080004ec <send_message>:
// Blocking send message function
void send_message(char *string) {
 80004ec:	b480      	push	{r7}
 80004ee:	b085      	sub	sp, #20
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
	int i = 0;
 80004f4:	2300      	movs	r3, #0
 80004f6:	60fb      	str	r3, [r7, #12]
	while (string[i] != '\0') {
 80004f8:	e00f      	b.n	800051a <send_message+0x2e>
		LPUART1->TDR = string[i];
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	687a      	ldr	r2, [r7, #4]
 80004fe:	4413      	add	r3, r2
 8000500:	781a      	ldrb	r2, [r3, #0]
 8000502:	4b0c      	ldr	r3, [pc, #48]	@ (8000534 <send_message+0x48>)
 8000504:	629a      	str	r2, [r3, #40]	@ 0x28
		while ((LPUART1->ISR & (1 << 6)) == 0)
 8000506:	bf00      	nop
 8000508:	4b0a      	ldr	r3, [pc, #40]	@ (8000534 <send_message+0x48>)
 800050a:	69db      	ldr	r3, [r3, #28]
 800050c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000510:	2b00      	cmp	r3, #0
 8000512:	d0f9      	beq.n	8000508 <send_message+0x1c>
			;
		i++;
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	3301      	adds	r3, #1
 8000518:	60fb      	str	r3, [r7, #12]
	while (string[i] != '\0') {
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	687a      	ldr	r2, [r7, #4]
 800051e:	4413      	add	r3, r2
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d1e9      	bne.n	80004fa <send_message+0xe>
	}
}
 8000526:	bf00      	nop
 8000528:	bf00      	nop
 800052a:	3714      	adds	r7, #20
 800052c:	46bd      	mov	sp, r7
 800052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000532:	4770      	bx	lr
 8000534:	40008000 	.word	0x40008000

08000538 <LPUART1_IRQHandler>:


int read_counter = 0; // State of the UI
int color = 0; // Chosen color
uint8_t traffic_delays[3] = { 2, 2, 2 }; // Duration for each light
void LPUART1_IRQHandler(void) {
 8000538:	b480      	push	{r7}
 800053a:	b083      	sub	sp, #12
 800053c:	af00      	add	r7, sp, #0
	if (RXNFE) {
 800053e:	4b07      	ldr	r3, [pc, #28]	@ (800055c <LPUART1_IRQHandler+0x24>)
 8000540:	69db      	ldr	r3, [r3, #28]
 8000542:	f003 0320 	and.w	r3, r3, #32
 8000546:	2b00      	cmp	r3, #0
 8000548:	d002      	beq.n	8000550 <LPUART1_IRQHandler+0x18>
		char LPUART1_read_value = LPUART1->RDR;
 800054a:	4b04      	ldr	r3, [pc, #16]	@ (800055c <LPUART1_IRQHandler+0x24>)
 800054c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800054e:	71fb      	strb	r3, [r7, #7]

	}
}
 8000550:	bf00      	nop
 8000552:	370c      	adds	r7, #12
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr
 800055c:	40008000 	.word	0x40008000

08000560 <__enable_irq>:

void __enable_irq(void) {
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
	__asm volatile(
 8000564:	f04f 0000 	mov.w	r0, #0
 8000568:	f380 8810 	msr	PRIMASK, r0
			"mov r0, #0 \n\t"
			"msr primask, r0 \n\t"
	);
}
 800056c:	bf00      	nop
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr
	...

08000578 <main>:

int main(void) {
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
	GPIO_initialization();
 800057c:	f7ff ff08 	bl	8000390 <GPIO_initialization>
	LPUART1_initialization();
 8000580:	f7ff fe56 	bl	8000230 <LPUART1_initialization>
	enable_TIM6();
 8000584:	f7ff fede 	bl	8000344 <enable_TIM6>
	__enable_irq();
 8000588:	f7ff ffea 	bl	8000560 <__enable_irq>
	delay(10);
 800058c:	200a      	movs	r0, #10
 800058e:	f7ff ff89 	bl	80004a4 <delay>
	send_message("\r\nPress any key to open the menu.\r\n");
 8000592:	480d      	ldr	r0, [pc, #52]	@ (80005c8 <main+0x50>)
 8000594:	f7ff ffaa 	bl	80004ec <send_message>
	while (1) {
		// Lits the LEDs for their determined duration
		turn_on_LED_RED();
 8000598:	f7ff ff30 	bl	80003fc <turn_on_LED_RED>
		delay(traffic_delays[0]);
 800059c:	4b0b      	ldr	r3, [pc, #44]	@ (80005cc <main+0x54>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	4618      	mov	r0, r3
 80005a2:	f7ff ff7f 	bl	80004a4 <delay>
		turn_on_LED_YELLOW();
 80005a6:	f7ff ff45 	bl	8000434 <turn_on_LED_YELLOW>
		delay(traffic_delays[1]);
 80005aa:	4b08      	ldr	r3, [pc, #32]	@ (80005cc <main+0x54>)
 80005ac:	785b      	ldrb	r3, [r3, #1]
 80005ae:	4618      	mov	r0, r3
 80005b0:	f7ff ff78 	bl	80004a4 <delay>
		turn_on_LED_GREEN();
 80005b4:	f7ff ff5a 	bl	800046c <turn_on_LED_GREEN>
		delay(traffic_delays[2]);
 80005b8:	4b04      	ldr	r3, [pc, #16]	@ (80005cc <main+0x54>)
 80005ba:	789b      	ldrb	r3, [r3, #2]
 80005bc:	4618      	mov	r0, r3
 80005be:	f7ff ff71 	bl	80004a4 <delay>
		turn_on_LED_RED();
 80005c2:	bf00      	nop
 80005c4:	e7e8      	b.n	8000598 <main+0x20>
 80005c6:	bf00      	nop
 80005c8:	08000684 	.word	0x08000684
 80005cc:	20000000 	.word	0x20000000

080005d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005d0:	480d      	ldr	r0, [pc, #52]	@ (8000608 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005d2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005d4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005d8:	480c      	ldr	r0, [pc, #48]	@ (800060c <LoopForever+0x6>)
  ldr r1, =_edata
 80005da:	490d      	ldr	r1, [pc, #52]	@ (8000610 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005dc:	4a0d      	ldr	r2, [pc, #52]	@ (8000614 <LoopForever+0xe>)
  movs r3, #0
 80005de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005e0:	e002      	b.n	80005e8 <LoopCopyDataInit>

080005e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005e6:	3304      	adds	r3, #4

080005e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005ec:	d3f9      	bcc.n	80005e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ee:	4a0a      	ldr	r2, [pc, #40]	@ (8000618 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005f0:	4c0a      	ldr	r4, [pc, #40]	@ (800061c <LoopForever+0x16>)
  movs r3, #0
 80005f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005f4:	e001      	b.n	80005fa <LoopFillZerobss>

080005f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005f8:	3204      	adds	r2, #4

080005fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005fc:	d3fb      	bcc.n	80005f6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005fe:	f000 f811 	bl	8000624 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000602:	f7ff ffb9 	bl	8000578 <main>

08000606 <LoopForever>:

LoopForever:
  b LoopForever
 8000606:	e7fe      	b.n	8000606 <LoopForever>
  ldr   r0, =_estack
 8000608:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800060c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000610:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000614:	080006b0 	.word	0x080006b0
  ldr r2, =_sbss
 8000618:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800061c:	20000020 	.word	0x20000020

08000620 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000620:	e7fe      	b.n	8000620 <ADC1_2_IRQHandler>
	...

08000624 <__libc_init_array>:
 8000624:	b570      	push	{r4, r5, r6, lr}
 8000626:	4d0d      	ldr	r5, [pc, #52]	@ (800065c <__libc_init_array+0x38>)
 8000628:	2600      	movs	r6, #0
 800062a:	4c0d      	ldr	r4, [pc, #52]	@ (8000660 <__libc_init_array+0x3c>)
 800062c:	1b64      	subs	r4, r4, r5
 800062e:	10a4      	asrs	r4, r4, #2
 8000630:	42a6      	cmp	r6, r4
 8000632:	d109      	bne.n	8000648 <__libc_init_array+0x24>
 8000634:	4d0b      	ldr	r5, [pc, #44]	@ (8000664 <__libc_init_array+0x40>)
 8000636:	2600      	movs	r6, #0
 8000638:	4c0b      	ldr	r4, [pc, #44]	@ (8000668 <__libc_init_array+0x44>)
 800063a:	f000 f817 	bl	800066c <_init>
 800063e:	1b64      	subs	r4, r4, r5
 8000640:	10a4      	asrs	r4, r4, #2
 8000642:	42a6      	cmp	r6, r4
 8000644:	d105      	bne.n	8000652 <__libc_init_array+0x2e>
 8000646:	bd70      	pop	{r4, r5, r6, pc}
 8000648:	f855 3b04 	ldr.w	r3, [r5], #4
 800064c:	3601      	adds	r6, #1
 800064e:	4798      	blx	r3
 8000650:	e7ee      	b.n	8000630 <__libc_init_array+0xc>
 8000652:	f855 3b04 	ldr.w	r3, [r5], #4
 8000656:	3601      	adds	r6, #1
 8000658:	4798      	blx	r3
 800065a:	e7f2      	b.n	8000642 <__libc_init_array+0x1e>
 800065c:	080006a8 	.word	0x080006a8
 8000660:	080006a8 	.word	0x080006a8
 8000664:	080006a8 	.word	0x080006a8
 8000668:	080006ac 	.word	0x080006ac

0800066c <_init>:
 800066c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800066e:	bf00      	nop
 8000670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000672:	bc08      	pop	{r3}
 8000674:	469e      	mov	lr, r3
 8000676:	4770      	bx	lr

08000678 <_fini>:
 8000678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800067a:	bf00      	nop
 800067c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800067e:	bc08      	pop	{r3}
 8000680:	469e      	mov	lr, r3
 8000682:	4770      	bx	lr
